# Simple example for MNIST-Addition.
# It generates 10k "sequences" of length 1, all satisfying A+B=C, where C is symbolic (i.e., it has no images associated to values).

mode: sequential_positive_only

length: 10

splits:
  train: {path: "data/train", samples: 80}
  val:   {path: "data/test", samples: 10}
  test:  {path: "data/test", samples: 10}

minizinc_prefix: |
  include "all_different.mzn";
  
  var bool: odd;
  var bool: even;
  constraint odd <-> C mod 2 = 1;
  constraint odd <-> not even;

predicates:
  "p(A,B,C)": "A + B = C"
  "odd": ~ # If the value is "~" or null, it expects predicates to be defined in minizinc_prefix.
  "even": ~

formula: "G p(A,B,C) & G (odd <-> WX even)"

types:
  mnist_t:
    0: "mnist/0"
    1: "mnist/1"
    2: "mnist/2"
    3: "mnist/3"
    4: "mnist/4"
    5: "mnist/5"
    6: "mnist/6"
    7: "mnist/7"
    8: "mnist/8"
    9: "mnist/9"
  int_t: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]


domains:
  A: mnist_t
  B: mnist_t
  C: int_t

streams:
  A: xx
  B: yy
  C: -zz  #

avoid_states:
  accepting_sinks: False
  rejecting_sinks: { "exponential": 1e-3 }
  self_loops: { "linear": 1e-1 }


truncate_on_sink:
  accepting: False
  rejecting: False

seed: 12345